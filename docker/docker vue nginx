project
 nginx
   nginx.conf
   
 vue_base
   ....
 
 dockerfile_web
 docker-compose.yaml
  
dockerfile_web 内容
 # 声明镜像来源为node:12.16.1
FROM node:12.16.1

# 声明工作目录
WORKDIR /web/

# 拷贝web项目到当前工作目录
COPY vue_base/ .

# 通过npm下载cnpm
RUN npm install -g cnpm --registry=https://registry.npm.taobao.org

# 使用cnpm进行安装依赖
RUN cnpm install || npm install

# 使用npm run build命令打包web项目
RUN npm run build

# ======= 以下为多阶段构建 =======

# 声明镜像来源为nginx:alpine, alpine 镜像小
FROM nginx:alpine

# 镜像编写者及邮箱
LABEL MAINTAINER="SliverHorn@sliver_horn@qq.com"

# 从.docker-compose/nginx/conf.d/目录拷贝my.conf到容器内的/etc/nginx/conf.d/my.conf
#COPY nginx/conf.d/my.conf /etc/nginx/conf.d/my.conf
COPY nginx/nginx.conf /etc/nginx/nginx.conf

# 从第一阶段进行拷贝文件
COPY --from=0 /web/dist /usr/share/nginx/html

# 如果单独执行dockerfile 需要首先cd 到dockerfile所在的文件夹内 
docker build -t hvag-web -f dockerfile_web .
docker run -itd -p 8089:8089 --name hw hvag-web
docker exec -it hw sh

nginx.conf 内容
#user  nobody;
worker_processes  1;
events {
  worker_connections  1024;
}

http {
  include mime.types;
  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';

  #access_log  logs/access.log  main;

  sendfile        on;
  #tcp_nopush     on;

  #keepalive_timeout  0;
  keepalive_timeout  65;
  # 开启gzip
  gzip  on;
   # 启用gzip压缩的最小文件，小于设置值的文件将不会压缩
  gzip_min_length 1k;
  # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，后面会有详细说明
  gzip_comp_level 6;
  # 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。
  gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/vnd.ms-fontobject font/ttf font/opentype font/x-woff image/svg+xml;
  # 是否在http header中添加Vary: Accept-Encoding，建议开启
  gzip_vary on;
  # 禁用IE 6 gzip
  gzip_disable "MSIE [1-6]\.";
  # 设置压缩所需要的缓冲区大小     
  gzip_buffers 32 4k;
  # 设置gzip压缩针对的HTTP协议版本
  gzip_http_version 1.0;

  #upstream test-vue {
  #  server test-vue:8080; # 该处为docker-compose 容器的名称
  #}

  #api服务配置
  server {
    listen       8089;
    server_name localhost;

    #charset koi8-r;
    #access_log  logs/host.access.log  main;

    location / {
        root /usr/share/nginx/html;
        add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        #try_files $uri $uri/ /index.html;
        try_files $uri $uri/ @router;#需要指向下面的@router否则会出现vue的路由在nginx中刷新出现404
    }

    location /api {
        proxy_set_header Host $http_host;
        proxy_set_header  X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        rewrite ^/api/(.*)$ /$1 break;  #重写
        proxy_pass http://177.7.0.12:8888; # 设置代理服务器的协议和地址
     }

    #对应上面的@router，主要原因是路由的路径资源并不是一个真实的路径，所以无法找到具体的文件
    #因此需要rewrite到index.html中，然后交给路由在处理请求资源
    location @router {
       rewrite ^.*$ /index.html last;
    }

  }

}
 

docker-compose.yaml 内容

version: "3.8"

networks:
  network:
    ipam:
      driver: default
      config:
        - subnet: '177.7.0.0/16'

services:
  web:
    build:
      context: ./
      dockerfile: ./dockerfile_web
    container_name: hvag-web
    restart: always
    ports:
      - '8089:8089'
    depends_on:
      - server
    command: [ 'nginx-debug', '-g', 'daemon off;' ]
    networks:
      network:
        ipv4_address: 177.7.0.11
